EntityTypes:
  - Agent
  - Intersection

predicates:
  - IsPedestrian:
      arity: 1
      method: IsPed(Agent)
      function: utils.pred_converter.z3_local.IsPed
      description: Checks if agent x is a pedestrian.
  - IsCar:
      arity: 1
      method: IsCar(Agent)
      function: utils.pred_converter.z3_local.IsCar
      description: Checks if agent x is a car.
  - IsAmbulance:
      arity: 1
      method: IsAmb(Agent)
      function: utils.pred_converter.z3_local.IsAmb
      description: Checks if the agent has concept "ambulance".
  - IsBus:
      arity: 1
      method: IsBus(Agent)
      function: utils.pred_converter.z3_local.IsBus
      description: Checks if the agent has concept "bus".
  - IsTiro:
      arity: 1
      method: IsTiro(Agent)
      function: utils.pred_converter.z3_local.IsTiro
      description: Checks if the agent has concept "tiro".
  - IsOld:
      arity: 1
      method: IsOld(Agent)
      function: utils.pred_converter.z3_local.IsOld
      description: Checks if the agent has concept "old".
  - IsInterEmpty:
      arity: 1
      method: IsInterEmpty(Intersection)
      function: utils.pred_converter.z3_local.IsInterEmpty
      description: Checks if the intersection x is empty.
  - IsInterCarEmpty:
      arity: 1
      method: IsInterCarEmpty(Intersection)
      function: utils.pred_converter.z3_local.IsInterCarEmpty
      description: Checks if the intersection x is empty with cars.
  - IsClose:
      arity: 2
      method: IsClose(Agent, Agent)
      function: utils.pred_converter.z3_local.IsClose
      description: Checks if agent x close to agent y.
  - IsAt:
      arity: 2
      method: IsAt(Agent, Intersection)
      function: utils.pred_converter.z3_local.IsAt
      description: Checks if agent x is at intersection y.
  - IsIn:
      arity: 2
      method: IsIn(Agent, Intersection)
      function: utils.pred_converter.z3_local.IsIn
      description: Checks if agent x is in intersection y.
  - HigherPri:
      arity: 2
      method: HigherPri(Agent, Agent)
      function: utils.pred_converter.z3_local.HigherPri
      description: Checks if agent x, x has higher priority to y.
  - Stop:
      arity: 1
      method: Stop(Agent)
      function: None
      description: Stop action.
  - Fast:
      arity: 1
      method: Fast(Agent)
      function: None
      description: Fast action.
  - Normal:
      arity: 1
      method: Normal(Agent)
      function: None
      description: Normal action.
  - Slow:
      arity: 1
      method: Slow(Agent)
      method: Slow
      description: Slow action.

Rules:
  - Stop:
      formula: |
        Or(
          And(
            Not(IsAmbulance(agent)), 
            IsCar(agent), 
            IsAt(agent, dummyIntersection), 
            Not(IsInterEmpty(dummyIntersection))
          ),
          And(
            Not(IsAmbulance(agent)), 
            IsCar(agent), 
            IsAt(agent, dummyIntersection), 
            IsAt(dummyAgent, dummyIntersection), 
            Or(
              HigherPri(dummyAgent, agent), 
              IsPedestrian(dummyAgent)
            )
          ),
          And(
            IsBus(agent), 
            IsOld(dummyAgent), 
            IsClose(agent, dummyAgent)
          ),
          And(
            IsPedestrian(agent), 
            IsAt(agent, dummyIntersection), 
            Not(IsInterCarEmpty(dummyIntersection))
          ),
          And(
            IsPedestrian(agent), 
            IsOld(dummyAgent), 
            IsClose(agent, dummyAgent)
          ),
          And(
            Not(IsAmbulance(agent)), 
            IsIn(agent, dummyIntersection), 
            IsIn(dummyAgent, dummyIntersection), 
            IsAmbulance(dummyAgent)
          )
        ) == Stop(agent)
      description: Combined Or version of the 6 stop rules with improved readability.
  - Fast:
      formula: And(Not(Stop(agent)), IsBus(agent)) == Fast(agent)
      description: If not stop, bus moves fast.
  - Slow:
      formula: |
        Or(
          And(
            Not(Stop(agent)), 
            IsTiro(agent), 
            IsOld(dummyAgent), 
            IsClose(agent, dummyAgent)
          ),
          And(
            Not(Stop(agent)), 
            IsCar(agent), 
            IsIn(agent, dummyIntersection)
          )
        ) == Slow(agent)
      description: Combined Or version of the Slow rules for vehicles.

# Stop Rules:
#   - Cars_Stop1:
#       formula: And(Not(IsAmbulance(agent)), IsCar(agent), IsAt(agent, dummyIntersection), Not(IsInterEmpty(dummyIntersection)))) == Stop(agent)
#       description: cars at intersection, not ambulance, not intersection empty, stop
#   - Cars_Stop2:
#       formula: And(Not(IsAmbulance(agent)), IsCar(agent), IsAt(agent, dummyIntersection), IsAt(dummyAgent, dummyIntersection), Or(HigherPri(dummyAgent, agent), IsPedestrian(dummyAgent))) == Stop(agent)
#       description: cars at intersection, not ambulance, intersection empty, higher priority car or ped is at intersection, stop
#   - Cars_Stop3:
#       formula: And(IsBus(agent), IsOld(dummyAgent), IsClose(agent, dummyAgent))) == Stop(agent)
#       description: buses will stop if an old man is close to the bus.
#   - Pedestrians_Stop1:
#       formula: And(IsPedestrian(agent), IsAt(agent, dummyIntersection), Not(IsInterCarEmpty(dummyIntersection)))) == Stop(agent)
#       description: pedestrians at intersection, not intersection empty with cars, stop
#   - Pedestrians_Stop2:
#       formula: And(IsPedestrian(agent), IsOld(dummyAgent), IsClose(agent, dummyAgent))) == Stop(agent)
#       description: pedestrians respect the old, stop
#   - All_Stop4:
#       formula: And(Not(IsAmbulance(agent)), IsIn(agent, dummyIntersection), IsIn(dummyAgent, dummyIntersection), IsAmbulance(dummyAgent))) == Stop(agent)
#       description: non ambulance in the intersection will stop if there is an ambulance in the intersection.

# Fast Rules:
#   - Cars_Fast1:
#     formula: And(Not(Stop(agent)), IsBus(agent)) == Fast(agent)
#     description: If not stop, bus moves fast.
#   - Pedestrians_Fast1:
#     formula: IsPedestrian(agent) == Not(Fast(agent))

# Slow Rules:
#   - Cars_Slow1:
#     formula: And(Not(Stop(agent)), IsTiro(agent), IsOld(dummyAgent), IsClose(agent, dummyAgent))) == Slow(agent)
#     description: If not stop, tiro, old around, move slowly.
#   - Cars_Slow2:
#     formula: And(Not(Stop(agent)), IsCar(agent), IsIn(agent, dummyIntersection))) == Slow(agent)
#     description: If not stop, car in intersection, move slowly.
#   - Pedestrians_Slow1:
#     formula: IsPedestrian(agent) == Not(Slow(agent))